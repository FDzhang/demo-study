spring:
  application:
    name: demo-application

#  cloud:
#    nacos:
#      # Nacos Config 配置项，对应 NacosConfigProperties 配置属性类
#      config:
#        server-addr: 127.0.0.1:8848 # Nacos 服务器地址
#        namespace: # 使用的 Nacos 的命名空间，默认为 null
#        group: DEFAULT_GROUP # 使用的 Nacos 配置分组，默认为 DEFAULT_GROUP
#        name: # 使用的 Nacos 配置集的 dataId，默认为 spring.application.name
#        file-extension: yaml # 使用的 Nacos 配置集的 dataId 的文件拓展名，同时也是 Nacos 配置集的配置格式，默认为 properties

# Nacos Config 配置项，以 spring.cloud.nacos.config 开头，对应 NacosConfigProperties 配置属性类。
#① server-addr 配置项，设置 Nacos 服务器地址。
#② namespace 配置项，使用的 Nacos 的命名空间，默认为 null，表示使用 public 这个默认命名空间。
#命名空间
#用于进行租户粒度的配置隔离。不同的命名空间下，可以存在相同的 Group 或 Data ID 的配置。
#  Namespace 的常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等。
#③ group 配置项，使用的 Nacos 配置分组，默认为 DEFAULT_GROUP。
#
#配置分组
#Nacos 中的一组配置集，是组织配置的维度之一。通过一个有意义的字符串（如 Buy 或 Trade ）对配置集进行分组，
#  从而区分 Data ID 相同的配置集。当您在 Nacos 上创建一个配置时，如果未填写配置分组的名称，
#  则配置分组的名称默认采用 DEFAULT_GROUP 。
#  配置分组的常见场景：不同的应用或组件使用了相同的配置类型，如 database_url 配置和 MQ_topic 配置。

#  ④ name 配置项，使用的 Nacos 配置集的 dataId，默认为 spring.application.name。
#  配置集
#  一组相关或者不相关的配置项的集合称为配置集。在系统中，一个配置文件通常就是一个配置集，包含了系统各个方面的配置。
#  例如，一个配置集可能包含了数据源、线程池、日志级别等配置项。
#
#  配置集 ID
#  Nacos 中的某个配置集的 ID。配置集 ID 是组织划分配置的维度之一。
#  Data ID 通常用于组织划分系统的配置集。一个系统或者应用可以包含多个配置集，每个配置集都可以被一个有意义的名称标识。
#  Data ID 通常采用类 Java 包（如 com.taobao.tc.refund.log.level）的命名规则保证全局唯一性。此命名规则非强制。
# 因为这里我们未进行配置，所以使用 Nacos 配置集的 dataId 为 demo-application。
#  这也是为什么我们将 spring.application.name 配置项添加到 bootstrap.yaml 配置文件中的原因。
#⑤ file-extension 配置项，使用的 Nacos 配置集的 dataId 的文件拓展名，
#  同时也是 Nacos 配置集的配置格式，默认为 properties。这里我们设置为 yaml，因为我们稍后使用的配置集的配置格式为 YAML。