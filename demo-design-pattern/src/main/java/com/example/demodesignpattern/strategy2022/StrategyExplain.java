package com.example.demodesignpattern.strategy2022;

/**
 * 策略模式是一种行为模式，也是替代大量if else的利器。
 * 它所能帮你解决的是场景，一般是具有同类可替代的行为逻辑算法场景。
 * 比如；
 * 不同类型的交易方式(信用卡、支付宝、微信)、
 * 生成唯一ID策略(UUID、DB自增、DB+Redis、雪花算法、Leaf算法)等，
 * 都可以使用策略模式进行行为包装，供给外部使用。
 * <p>
 * 在本案例中我们模拟在购买商品时候使用的各种类型优惠券(满减、直减、折扣、n元购)
 * 这个场景几乎也是大家的一个日常购物省钱渠道，购买商品的时候都希望找一些优惠券，让购买的商品更加实惠。
 * 而且到了大促的时候就会有更多的优惠券需要计算那些商品一起购买更加优惠！！！
 * 这样的场景有时候用户用起来还是蛮爽的，但是最初这样功能的设定以及产品的不断迭代，对于程序员👨‍💻‍开发还是不太容易的。
 * 因为这里包括了很多的规则和优惠逻辑，所以我们模拟其中的一个计算优惠的方式，使用策略模式来实现。
 * <p>
 * <p>
 * 总结
 * 以上的策略模式案例相对来说不并不复杂，主要的逻辑都是体现在关于不同种类优惠券的计算折扣策略上。
 * 结构相对来说也比较简单，在实际的开发中这样的设计模式也是非常常用的。
 * 另外这样的设计与命令模式、适配器模式结构相似，但是思路是有差异的。
 * 通过策略设计模式的使用可以把我们方法中的if语句优化掉，大量的if语句使用会让代码难以扩展，也不好维护，同时在后期遇到各种问题也很难维护。
 * 在使用这样的设计模式后可以很好的满足隔离性与和扩展性，对于不断新增的需求也非常方便承接。
 * [策略模式、适配器模式、组合模式]等，在一些结构上是比较相似的，但是每一个模式是有自己的逻辑特点，
 * 在使用的过程中最佳的方式是经过较多的实践来吸取经验，为后续的研发设计提供更好的技术输出。
 * <p>
 * <p>
 * link : https://www.cnblogs.com/xiaofuge/p/13255934.html
 *
 * @author : zxq
 * @create : 2022/2/24 20:37
 */
public class StrategyExplain {

}


